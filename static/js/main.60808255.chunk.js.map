{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["GameStatus","BoardStatus","Player","Keyword","calculateWinner","squares","lines","i","length","a","b","c","Square","props","className","onClick","value","Button","Game","status","useState","Array","fill","setSquare","xIsNext","setXIsNext","words","keyValue","ai","setAI","human","setHuman","winner","renderMove","nextSquare","slice","minimax","board","depth","isMaximizing","scores","X","draw","O","every","bestScore","Infinity","score","Math","max","min","map","key","move","random","floor","bestMove","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60808255.chunk.js","sourcesContent":["import React, {ReactNode, useState} from 'react';\nimport './App.css';\n\ntype SquareValue = 'X' | 'O' | null;\nlet GameStatus = \"game-status hide\";\nlet BoardStatus = \"board hide\";\nlet Player = \"player\";\nlet Keyword = \"keyword hide\";\n\nconst calculateWinner = (squares: SquareValue[]): SquareValue => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n};\n\ninterface SquareProps {\n  onClick(): void;\n  value: SquareValue;\n}\n\nconst Square: React.FC<SquareProps> = props => {\n  return (\n    <div className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </div>\n  );\n};\n\ninterface ButtonProps {\n  onClick(): void;\n  value: any;\n}\n\nconst Button:React.FC<ButtonProps> = props  => {\n  return (\n    <div className=\"button\" onClick={props.onClick}>\n      {props.value}\n    </div>\n  );\n};\n\nconst Game: React.FC = () => {\n  const [squares, setSquare] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState<boolean>(true);\n  const words = [\"1-Player\", \"2-Players\"];\n  const keyValue = [\"X-First\", \"O-Second\"];\n  const [ai, setAI] = useState<String>('');\n  const [human, setHuman] = useState<String>('');\n  let winner = calculateWinner(squares);\n\n  const renderMove = (i: number) => {\n    const nextSquare = squares.slice()\n    nextSquare[i] = xIsNext ? \"X\" : \"O\";\n    setXIsNext(!xIsNext);\n    setSquare(nextSquare);\n  };\n\n  const renderSquare = (i: number): ReactNode => {\n    return (\n      <Square\n        value={squares[i]}\n        onClick={() => {\n          if (squares[i] == null && winner == null){\n            renderMove(i);\n          }\n        }}\n      />\n    );\n  };\n\n  const renderButton = (i:number): ReactNode => {\n    return(\n      <Button\n        value={words[i]}\n        onClick={() => {\n          if(words[i] === \"2-Players\"){\n            setXIsNext(true)\n            setSquare(Array(9).fill(null))\n            GameStatus = \"game-status\";\n            BoardStatus = \"board\";\n            Player = \"player hide\";\n            Keyword = \"keyword hide\";\n          }\n          else {\n            setXIsNext(true)\n            setSquare(Array(9).fill(null))\n            Player = \"player hide\";\n            Keyword = \"keyword\";\n          }\n        }}\n      />\n    );\n  };\n\n  const renderKey = (i:number): ReactNode => {\n    return(\n      <Button\n        value={keyValue[i]}\n        onClick={() => {\n          setXIsNext(true)\n          setSquare(Array(9).fill(null))\n          Player = \"player hide\";\n          GameStatus = \"game-status\";\n          BoardStatus = \"board\";\n          Keyword = \"keyword hide\";\n          (keyValue[i] === \"X-First\") ? setAI('O') : setAI('X');\n          (keyValue[i] === \"X-First\") ? setHuman('X') : setHuman('O');\n        }}\n      />\n    );\n  };\n\n  const bestMove = () => {\n    // AI to make its turn\n    let bestScore = -Infinity;\n    let move = -1;\n    \n    for (let i = 0; i < 9; i++) {\n      if (squares[i] === null) {\n        squares[i] = ai;\n        let score = minimax(squares, 0, false);\n        squares[i] = null;\n        if (score > bestScore) {\n          bestScore = score;\n          move = i;\n        }\n      }\n    }\n    if (ai === \"X\" && squares.every(function(i) { return i == null})) {\n      let probability = 0.6; //set higher chance of move at 4\n      ((Math.random() *1) < probability) ? move = 4: move =Math.floor((Math.random() * 9) + 1);\n    }\n    renderMove(move);\n  }\n\n  const minimax = (board: Array<any>, depth: number, isMaximizing: boolean) => {\n    let scores;\n    if (ai === \"X\"){\n      scores = {\n        X: 10,\n        draw: 0,\n        O: -10\n      };\n    }\n    else{\n      scores = {\n        X : -10,\n        draw : 0,\n        O : 10\n      };\n    }\n    winner = calculateWinner(squares);\n    if(winner!= null){\n      return scores[winner];\n    }else if (squares.every(function(i) { return i !== null; }) && winner == null) {\n      return scores['draw'];\n    }\n\n    if (isMaximizing) {\n      let bestScore = -Infinity;\n      for (let i = 0; i < 9; i++) {\n        if (board[i] === null) {\n          board[i] = ai;\n          let score = minimax(board, depth + 1, false);\n          board[i] = null;\n          bestScore = Math.max(score, bestScore);\n        }\n      }\n      return bestScore;\n    } else {\n      let bestScore = Infinity;\n      for (let i = 0; i < 9; i++) {\n        if (board[i] === null) {\n          board[i] = human;\n          let score = minimax(board, depth + 1, true);\n          board[i] = null;\n          bestScore = Math.min(score, bestScore);\n        }\n      }\n      return bestScore;\n    }\n  }\n\n  let status;\n  if (winner) {\n    status = winner + \" Win!\";\n  } else if (squares.every(function(i) { return i !== null; }) && winner == null) {\n    status = \"Draw!\";\n  } else {\n    status = (xIsNext ? \"X\" : \"O\") + \" Turns\";\n  }\n\n  return (\n    <div className=\"game\">\n      <div className={Player}>\n        {words.map((value, key) => renderButton(key))}\n      </div>\n      <div className={Keyword}>\n        {keyValue.map((value, key) => renderKey(key))}\n      </div>\n      <div className={GameStatus}>\n        <Button\n          value={\"New Game\"}\n          onClick={() => {\n            setXIsNext(true)\n            setSquare(Array(9).fill(null))\n            setAI('');\n            GameStatus = \"game-status hide\";\n            BoardStatus = \"board hide\";\n            Player = \"player\";\n            Keyword = \"keyword hide\";\n            }\n          }\n        />\n        {status} \n      </div>\n      <div className=\"game-board\">\n        <div className={BoardStatus}>{squares.map((value,key) => renderSquare(key))}</div>\n        {ai === (xIsNext ? \"X\" : \"O\") ? bestMove(): null}\n      </div>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <p>Tic-Tac-Toe Game</p>\n      </div>\n      <div className=\"App-body\">\n        <Game />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}